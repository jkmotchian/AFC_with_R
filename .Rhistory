fonction2 = function(x){
b = sin(x) + cos(x)
return(b)
}
fonction3 =function(x){
c= exp(x)/x
}
fonction1
fonction2
fonction3
liste1 = list(fonction1, fonction2,fonction3)# mettre dans une liste
fonction3 =function(x){
c= exp(x)/x
return(c)
}
fonction1
fonction2
fonction3
liste1 = list(fonction1, fonction2,fonction3)# mettre dans une liste
borneinf = list(0,-pi,10)
bornesup = list(10,pi,20)
borneinf = list(0,-pi,10)
bornesup = list(10,pi,20)
mapply(FUN = integrate,liste1, borneinf,bornesup)
b <-hf_tbl %>% select(UniqueCarrier, Cancelled) %>% sum(Cancelled==1)
library(dplyr)
library(magrittr)
library(tibble)
library(hflights)
b <-hf_tbl %>% select(UniqueCarrier, Cancelled) %>% sum(Cancelled==1)
nbr_vol_annulé<-hf_tbl%>%group_by(UniqueCarrier)
data("hflights")
hf_tbl <- as.tibble(hflights)
q3 <-
hf_tbl %>% select(Year,
Month,
DayofMonth,
UniqueCarrier,
FlightNum,
ArrDelay,
ArrDelay) %>% filter(ArrDelay > 600)
q3 <- q3 %>% arrange(desc(ArrDelay)) # par ordre decroissant
q3 <- q3 %>% arrange(ArrDelay) # par ordre croissant
q4 <-
hf_tbl %>% select(Year,
Month,
DayofMonth,
UniqueCarrier,
FlightNum,
ArrDelay,
ArrDelay) %>% arrange(UniqueCarrier, ArrDelay) %>% filter(ArrDelay > 600)
#  la fonction mutate pour créer une nouvelle colonne
hf_tbl <- hf_tbl %>% mutate(AverageSpeed = Distance / AirTime * 60)
q7 <-
hf_tbl %>% select(UniqueCarrier, AverageSpeed) %>% group_by(UniqueCarrier) %>% summarize(
moyenne_vol = mean(AverageSpeed, na.rm = T),
ecartype = sd(AverageSpeed, na.rm = T)
)
nbre_vole <-
hf_tbl %>% select(UniqueCarrier, Year, Month = 7) %>% mutate(vole_US_juillet = n_distinct(Month)) %>% group_by(Year, Month)
vole_US <-  hf_tbl %>% filter(Month==7 & UniqueCarrier == "US") %>% n_distinct()
nbr_vol_annulé<-hf_tbl%>%group_by(UniqueCarrier)
nbr_vol_annulé
View(nbr_vol_annulé)
nbr_vol_annulé<-hf_tbl%>%group_by(UniqueCarrier) %>% summarise(moy_cancel=mean(Cancelled)*100) %>% arrange(desc(moy_cancel))
nbr_vol_annulé
nbr_vol_annulé<-hf_tbl%>%group_by(UniqueCarrier)
View(nbr_vol_annulé)
nbr_vol_annulé<-hf_tbl%>%group_by(UniqueCarrier) %>% summarise(moy_cancel=mean(Cancelled)*100) %>% arrange(desc(moy_cancel))
nbr_vol_annulé
install.packages("babynames")
Library(babynames)
library(babynames)
data("babynames")
bbn2000 <- babynames
View(bbn2000)
data("babynames")
bbn2000 <- babynames
bbn2000 <- babynames
bbn2000 <- bbn[bbn$year == 2000, ]
bbn <- babynames
bbn2000_split <- split(bbn2000, bbn2000$sex)
bbn2000_split_top5 <- lapply(bbn2000_split, function(df) {
df[order(df$n, decreasing = TRUE)[1:5], ]
})
bbn2000_top5 <- do.call(rbind, bbn2000_split_top5)
bbn2000_top5
bbn2000_split
bbn2000_split <- split(bbn2000, bbn2000$sex)
bbn2000_split
?split
View(bbn2000_split)
View(bbn2000)
View(bbn2000_split)
View(bbn2000_split_top5)
View(bbn2000_top5)
View(bbn2000_split)
bbn2000_split_top5 <- lapply(bbn2000_split, function(df) {
df[order(df$n, decreasing = TRUE)[1:5], ]
})
bbn2000_top5 <- do.call(rbind, bbn2000_split_top5)
bbn2000_top5
nbre_vole <-
hf_tbl %>% select(UniqueCarrier, Year, Month = 7) %>% mutate(vole_US_juillet = n_distinct(Month)) %>% group_by(Year, Month)
View(nbre_vole)
vole_US <-  hf_tbl %>% filter(Month==7 & UniqueCarrier == "US") %>% n_distinct()
nbr_vol_annulé <-
hf_tbl %>% group_by(UniqueCarrier) %>% summarise(moy_cancel = mean(Cancelled) *
100) %>% arrange(desc(moy_cancel))
install.packages("shiny")
library(shiny)
server_r <- shinyServer(function(input, output) {})
iu_R <- shinyUI(fluidPage(
titlePanel("Immobilier locatif d'Aurillac")
))
server_r <- shinyServer(function(input, output) {})
logement <- read.table(file = "immobilier_rec.txt", sep = "\t", header = TRUE)
shinyServer(function(input, output) {
output$nuage <- renderPlot({
plot(logement$loyer ~ logement$superficie, data = logement,
main = "Loyer en fonction de la superficie")
})
})
shinyUI(fluidPage(
titlePanel("Immobilier locatif d'Aurillac"),
plotOutput("nuage")
))
shinyApp(iu_R, server_r())
server_r <- shinyServer(function(input, output) {})
logement <- read.table(file = "immobilier_rec.txt", sep = "\t", header = TRUE)
shinyServer(function(input, output) {
output$nuage <- renderPlot({
plot(logement$loyer ~ logement$superficie, data = logement,
main = "Loyer en fonction de la superficie")
})
})
iu_R <- shinyUI(fluidPage(
titlePanel("Immobilier locatif d'Aurillac")
))
shinyUI(fluidPage(
titlePanel("Immobilier locatif d'Aurillac"),
plotOutput("nuage")
))
shinyApp(iu_R, server_r())
shinyApp(iu_R, server_r())
shinyUI(fluidPage(
titlePanel("Immobilier locatif d'Aurillac"),
plotOutput("nuage")
))
iu_R <- shinyUI(fluidPage(
titlePanel("Immobilier locatif d'Aurillac")
))
library(shiny)
library(shiny)
server_r <- shinyServer(function(input, output) {})
logement <- read.table(file = "immobilier_rec.txt", sep = "\t", header = TRUE)
load("C:/Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/Rshiny/immobilier_rec.txt")
setwd(C:"Users\Jean Kevin MOTCHIAN\Desktop\semestre3\Prog_ Stat_auto\TP")
setwd(C:"Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/rshiny")
setwd("C:Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/rshiny")
setwd("/C:Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/rshiny")
setwd("~/")
logement <- read.table(file ="/C:Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/rshiny/immobilier_rec.txt", sep = "\t", header = TRUE)
logement <- read.table("/C:Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/rshiny/immobilier_rec.txt", sep = "\t", header = TRUE)
server_r <- shinyServer(function(input, output) {})
runApp('C:/Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/Rshiny/server.R')
shinyServer(function(input, output) {})
shiny::runApp('C:/Users/Jean Kevin MOTCHIAN/Desktop/semestre3/Prog_ Stat_auto/TP/Rshiny')
library(datasets)
data("mtcars")
library(ggplot2)
ggplot(mtcars)+aes(x= mpg)+ geom_histogram()
ggplot(mtcars)+aes(x= mpg)+ geom_histogram(bins=40)
ggplot(mtcars)+aes(x= mpg)+ geom_histogram()
ggplot(mtcars)+aes(x= mpg)+ geom_histogram(weight=5 )
ggplot(mtcars)+aes(x= mpg)+ geom_histogram(bins=6)
ggplot(mtcars)+aes(x= mpg)+ geom_histogram(bins=8)
ggplot(mtcars)+aes(x= mpg)+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars)+aes(x= mpg, color="red")+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars)+aes(x= mpg, color="black")+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars)+aes(x= mpg, color="black")+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars)+aes(x= mpg)+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars)+aes(x= mpg, color= "black")+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars)+aes(x= mpg, color= "blue")+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars)+aes(x= mpg, color= "blue")+ geom_histogram(bins=8, fill="yello")
ggplot(mtcars)+aes(x= mpg, color= "blue")+ geom_histogram(bins=8, fill="red")
ggplot(mtcars)+aes(x= mpg, color= "blue")+ geom_histogram(bins=8, fill="green")
ggplot(mtcars)+aes(x= mpg, color= "blue")+ geom_histogram(bins=8, fill="blue")
ggplot(mtcars) + aes (x=cyl) + geom_bar()
ggplot(mtcars) + aes (x=cyl, color="red") + geom_bar()
ggplot(mtcars) + aes (x=cyl, color="red") + geom_bar(fill="red")
View(mtcars)
ggplot(mtcars) + aes(x=disp, y=mpg)+geom_point()
ggplot(mtcars) + aes(x=disp, y=mpg)+geom_point(aes(x=cyl))
variab_disc <- c(0.3, 0.2,0.4,0.1)
variab_disc <- data.frame(c(0.3, 0.2,0.4,0.1))
View(variab_disc)
variab_disc <- data.frame(c(0.3, 0.2,0.4,0.1), c("rouge", "bleu","vert","noir"))
View(variab_disc)
variable_dis<- c(0.3, 0.2,0.4,0.1)
couleur <-  c("rouge", "bleu","vert","noir")
donnees <- data.frame(variable_dis, couleur)
ggplot(donnees) + aes(x=couleur, y=variab_disc) + geom_bar()
View(variab_disc)
variable_disc<- c(0.3, 0.2,0.4,0.1)
couleur <-  c("rouge", "bleu","vert","noir")
donnees <- data.frame(variable_disc, couleur)
ggplot(donnees) + aes(x=couleur, y=variab_disc) + geom_bar()
donnees
ggplot(donnees) + aes(x=variab_disc, y=couleur) + geom_bar()
variab_disc
variable_di<- c(0.3, 0.2,0.4,0.1)
couleur <-  c("rouge", "bleu","vert","noir")
donnees <- data.frame(couleur, variab_di)
donnees <- data.frame(couleur, variable_di)
ggplot(donnees) + aes(x=couleur, y=variable_di) + geom_bar()
couleur
variable_di
donnees
ggplot(donnees) + aes(x=couleur, y=variable_di) + geom_histogram()
ggplot(donnees) + aes(x=couleur) + geom_histogram()
ggplot(donnees) + aes(x=variable_di) + geom_histogram()
ggplot(mtcars) + aes (x=cyl, color="red") + geom_bar(fill="red")
ggplot(donnees) + aes(y=variable_di) + geom_histogram()
ggplot(donnees) + aes(x=couleur, y = variab_di) + geom_bar(stat = "identity")
ggplot(donnees) + aes(x=couleur, y = variable_di) + geom_bar(stat = "identity")
ggplot(donnees) + aes(x=couleur, y = variable_di) + geom_bar(stat = "identity") +  coord_flip()
ggplot(donnees) + aes(x=couleur, y = variable_di) + geom_bar(stat = "identity") + scale_color_manual(values = c(vert="green", rouge="red", noir="black", bleu="blue"))
ggplot(donnees) + aes(x=couleur, y = variable_di, color=cut) + geom_bar(stat = "identity") + scale_color_manual(values = c(vert="green", rouge="red", noir="black", bleu="blue"))
scale_color_manual
library(ggplot2)
data("msleep")
attach(msleep)
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
labs(x="sleep total", y="sleep REM",
title = "sleet total en fonction de REM")
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
labs(x="sleep total", y="sleep REM",
title = "sleep total en fonction de REM")
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
labs(x="sleep total", y="sleep REM",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by =4), # controler longue de l'axe x
labels = c("0h","4h","8h","12","16h","20h"))
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
geom_point()
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
geom_point()
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
geom_point() +
labs(x="sleep total", y="sleep REM",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by =4), # controler longue de l'axe x
labels = c("0h","4h","8h","12","16h","20h"))
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
geom_point() +
labs(x="sleep total", y="sleep REM",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12","16h","20h"))
ggplot(data=msleep, aes(x=sleep_rem,y=sleep_total)) +
geom_point()
View(msleep)
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total", y="sleep REM",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12","16h","20h"))
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total", y="sleep REM",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h"))
options(warn = -1)
library(RColorBrewer)
display.brewer.all()
msleep$brainwt2 <- brainwt>0.012
ggplot(data=msleep) +
geom_bar(aes(x=vore, fill= brainwt2),
col="black") +
scale_fill_brewer(palette = "Pastel1") +
theme_classic()
#ajuster les Axees et controler les parametres
library(ggplot2)
data("msleep")
attach(msleep)
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total", y="sleep REM",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h"))
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c(0,2,4,"6 temps fort"))
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort"))
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort")) +
theme_bw()
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort")) +
theme_bw() +
theme(title = element_text(color = "red", size = 20),
axis.title.x = element_text(color="blue", size = 15, face = "italic"),
axis.title.y = element_text(color="blue", size=15, face = "italic"))
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort")) +
theme_bw() +
theme(title = element_text(color = "red", size = 20),
axis.title.x = element_text(color="blue", size = 15, face = "italic"),
axis.title.y = element_text(color="blue", size=15, face = "italic"),
axis.ticks = element_blank()) +
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort")) +
theme_bw() +
theme(title = element_text(color = "red", size = 20),
axis.title.x = element_text(color="blue", size = 15, face = "italic"),
axis.title.y = element_text(color="blue", size=15, face = "italic"),
axis.ticks = element_blank())
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point() +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort")) +
theme_bw() +
theme(title = element_text(color = "red", size = 20),
axis.title.x = element_text(color="blue", size = 15, face = "italic"),
axis.title.y = element_text(color="blue", size=15, face = "italic"),
axis.ticks = element_blank())
face()
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point(col="tomato2", size = 3) +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort")) +
theme_bw() +
theme(title = element_text(color = "red", size = 20),
axis.title.x = element_text(color="blue", size = 15, face = "italic"),
axis.title.y = element_text(color="blue", size=15, face = "italic"),
axis.ticks = element_blank())
ggplot(data=msleep, aes(x=sleep_total,y=sleep_rem)) +
geom_point(col="tomato2", size = 2) +
labs(x="sleep total (heures)", y="sleep REM (heure)",
title = "sleep total en fonction de REM") +
scale_x_continuous(breaks = seq(0,20, by = 4), # controler longue de l'axe x
labels = c("0h","4h","8h","12h","16h","20h")) +
scale_y_continuous(labels = c("0h","2h","4h","6h temps fort")) +
theme_bw() +
theme(title = element_text(color = "red", size = 20),
axis.title.x = element_text(color="blue", size = 15, face = "italic"),
axis.title.y = element_text(color="blue", size=15, face = "italic"),
axis.ticks = element_blank())
# changer le titre de la legende et sa position
msleep$awake2 <- msleep$awake>13
# changer le titre de la legende et sa position
msleep$awake2 <- msleep$awake>13
ggplot(data= msleep, aea(x= vpre, fill = awake2)) +
geom_bar(position=  "dodge", wodth = 0.7)+
scale_fill_brewer(palette ="Spectral") +
scale_fill_manual(values = c("red", "black"),
labels = c("<=13", ">13"),
name="AWAKE")
ggplot(data= msleep, aes(x= vpre, fill = awake2)) +
geom_bar(position=  "dodge", wodth = 0.7)+
scale_fill_brewer(palette ="Spectral") +
scale_fill_manual(values = c("red", "black"),
labels = c("<=13", ">13"),
name="AWAKE")
ggplot(data= msleep, aes(x= vore, fill = awake2)) +
geom_bar(position=  "dodge", wodth = 0.7)+
scale_fill_brewer(palette ="Spectral") +
scale_fill_manual(values = c("red", "black"),
labels = c("<=13", ">13"),
name="AWAKE")
ggplot(data= msleep, aes(x= vore, fill = awake2)) +
geom_bar(position=  "dodge", wodth = 0.7) +
scale_fill_manual(values = c("red", "black"),
labels = c("<=13", ">13"),
name="AWAKE") +
theme(legend.text.align=1,
legend.position = "bottom")
ggplot(data= msleep, aes(x= vore, fill = awake2)) +
geom_bar(position=  "dodge", wodth = 0.7) +
scale_fill_manual(values = c("red", "black"),
labels = c("<=13", ">13"),
name="AWAKE") +
theme(legend.text.align=1,
legend.position = "top")
ggplot(data= msleep, aes(x= vore, fill = awake2)) +
geom_bar(position=  "dodge", wodth = 0.7) +
scale_fill_manual(values = c("red", "black"),
labels = c("<=13", ">13"),
name="AWAKE") +
theme(legend.text.align=1,
legend.position = "top",
legend.key.size = unit(0.5, "line")) # changer la position de la legende, on peut elever le titre de la legende
ggplot(data= msleep, aes(x= vore, fill = awake2)) +
geom_bar(position=  "dodge", wodth = 0.7) +
scale_fill_manual(values = c("red", "black"),
labels = c("<=13", ">13"),
name="AWAKE") +
theme(legend.text.align=1,
legend.position = "top",
legend.key.size = unit(1, "line")) # changer la position de la legende, on peut elever le titre de la legende
#-------les library ----------------------------------
cat("les library \n")
#-------les library ----------------------------------
cat("importation des library \n")
# Importation de fichier
cat("Importer le fichier the\n")
fviz_mca_ind(res_acm,repel=TRUE,habillage = "lieu_achat",addEllipses = TRUE) +
scale_color_manual(values = c("red","blue","darkgreen"))
library(ggplot2)
library(nFactors)
library(FactoMineR)
library(factoextra)
library(GGally)
library(corrplot)
# Importation de fichier
cat("Importer le fichier the\n")
the <- read.csv("the.csv")
colnames(the)
#------------------------Partie2: ACM-----------------------------------------##
#----ACM
res_acm <- MCA (the, quanti.sup = 22, quali.sup = quali_sup )
res.hcpc <- HCPC(res_acm)
#---Nombre d'axe principaux -------------
cat("Partie visualisation \n")
eigenvalue <- get_eigenvalue(res_acm)
eigenvalue
fviz_eig(res_acm, addlabels = TRUE)
aparallel <- min(mean(eigenvalue[,1]),0.1)
aparallel <- rep(aparallel,nrow(eigenvalue))
nScree(eigenvalue[,1],aparallel = aparallel)
#-----------Representation graphique------------------
fviz_mca_var(res_acm,repel=TRUE,col.var = "cos2",col.quali.sup = "black",
gradient.cols = c("steelblue", "orange", "red"))
fviz_mca_var(res_acm,repel=TRUE,choice = "var",
gradient.cols = c("steelblue", "orange", "red"))
#------------------------Partie2: ACM-----------------------------------------##
#----ACM
res_acm <- MCA (the, quanti.sup = 22, quali.sup = quali_sup )
res.hcpc <- HCPC(res_acm)
#-------les library ----------------------------------
cat("importation des library \n")
library(ggplot2)
library(nFactors)
library(FactoMineR)
library(factoextra)
library(GGally)
library(corrplot)
# Importation de fichier
cat("Importer le fichier the\n")
the <- read.csv("the.csv")
setwd("C:/Users/Jean Kevin MOTCHIAN/Desktop/semestre3/AFC_with_R")
#-------les library ----------------------------------
cat("importation des library \n")
library(ggplot2)
library(nFactors)
library(FactoMineR)
library(factoextra)
library(GGally)
library(corrplot)
# Importation de fichier
cat("Importer le fichier the\n")
the <- read.csv("the.csv")
summary(the)
ncol(the) # 36 variables
nrow(the) # 300 enregistrements
the[,22]
quali_sup = c(19,20,23:36 )
colnames(the)
#------------------------Partie2: ACM-----------------------------------------##
#----ACM
res_acm <- MCA (the, quanti.sup = 22, quali.sup = quali_sup )
res.hcpc <- HCPC(res_acm)
